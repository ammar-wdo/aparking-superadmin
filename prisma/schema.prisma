generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Airport {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime
  name      String
  Company   Company[]
  Service   Service[]
  entities  Entity[]
}

enum PaymentMethod {
  IDEAL
  CREDIT_CARD
  PAYPAL
}

enum STATUS {
  PENDING
  SUCCEEDED
  EXPIRED
  
}

model Booking {
  id                    String        @id @default(uuid())
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  address               String?
  arrivalDate           DateTime
  bookingCode           String        @unique
  carColor              String
  carLicense            String
  carModel              String
  companyName           String?
  departureDate         DateTime
  email                 String
  firstName             String
  lastName              String
  discount              Float?
  flightNumber          String?
  isCompany             Boolean       @default(false)
  parkingPrice          Float
  paymentStatus         STATUS?       @default(PENDING)
  place                 String?
  returnFlightNumber    Int?
  phoneNumber           String
  total                 Float
  vatNumber             Int?
  zipcode               String?
  arrivalTime           String
  departureTime         String
  daysofparking         Int
  bookingOnBusinessName String?
  extraServiceFee       Float?
  status                String?
  paymentMethod         PaymentMethod @default(IDEAL)
  serviceId             String
  service               Service       @relation(fields: [serviceId], references: [id])
  payments              Payment[]
}

model Company {
  id           String   @id @default(uuid())
  email        String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  address      String
  commision    Float    @default(0)
  name        String?
  contact      String
  password     String
 
  isActive     Boolean  @default(false)
  phone        String
  place        String
  zipcode      String

 
  entities      Entity[]

  notifications Notification[]
  airports      Airport[]
}

model Entity {
  id            String @id @default(uuid())
  email         String @unique
  password      String
  entityName    String
  entityAddress String
  entityZipcode String
  entityPlace   String
  phone         String

  contactPerson  String?
  invoiceEmail   String?
  companyName    String
  invoiceAddress String
  invoiceZipcode String
  invoicePlace   String
  invoiceCountry String

  vatNO String?
  IBAN  String?

  chamberOfCommerce String
  isActive          Boolean @default(false)

  services Service[]

  airportId String
  airport   Airport @relation(fields: [airportId], references: [id])

  companyId String
  company   Company @relation(fields: [companyId], references: [id])

   notifications Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Customer {
  id             String   @id @default(uuid())
  email          String   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  address        String?
  carColor       String
  carLicense     String
  carModel       String
  companyAddress String?
  companyPlace   String?
  companyZipcode String?
  firstname      String
  invoiceEmail   String   @unique
  isCompany      Boolean  @default(false)
  lastname       String
  phone          String
  place          String?
  zipcode        String?
}

model Invoice {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum NotificationType {
  COMPANY
  ENTITY
  SERVICE
  BOOKING
}

enum NotificationsStatus {
REQUEST
DELETE
APPROVE

}

model Notification {
  id           String   @id @default(uuid())

  companyId    String?
  company Company? @relation(fields: [companyId],references: [id])


  entityId    String?
  entity      Entity? @relation(fields: [entityId],references: [id])

  isAdmin     Boolean @default(false)

name            String?
  message     String?
  IdHolder    String?
  type      NotificationType?  
  status    NotificationsStatus?


  isRead    Boolean @default(false)

  servicePrice Float?

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
 
}

model Payment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bookingId String
  Booking   Booking  @relation(fields: [bookingId], references: [id])
}

model Service {
  id String @id @default(uuid())

  name           String
  parkingAddress String
  parkingCountry String
  parkingPlace   String
  parkingZipcode String

  terms         String
  bookingsEmail String?

  arrivalTodos   String?
  departureTodos String?

  generalInformation String?
  importantInfo      String?

  distanceToAirport String?
  timeToAirport     String?

  facilities String[] @default([])
  highlights String[] @default([])

  logo   String?
  images String[] @default([])

  parkingType ParkingType @default(shuttle)

 

  pricings Float[]

  isActive     Boolean        @default(false)
  spots        Int            @default(1)
  available    Boolean        @default(false)
  
  airportId    String
  entityId     String


  
  availability Availability[]
  bookings     Booking[]
  rules        Rule[]
 
  entity      Entity        @relation(fields: [entityId], references: [id])

  airport      Airport        @relation(fields: [airportId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Availability {
  id        String   @id @default(uuid())
  startDate DateTime @default(now())
  endDate   DateTime
  label     String?
  serviceId String
  service   Service  @relation(fields: [serviceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ParkingType {
  shuttle
  valet
}

enum RuleType {
  FIXED
  PERCENTAGE
}

enum RuleAction {
  TOTAL
  DAY
}

model Rule {
  id        String   @id @default(uuid())
  label     String
  startDate DateTime
  endDate   DateTime

  type   RuleType?   @default(FIXED)
  action RuleAction? @default(TOTAL)

  percentage Int?
  value      Int?

  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
