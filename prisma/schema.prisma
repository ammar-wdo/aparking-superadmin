generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
   directUrl         = env("DIRECT_URL")

}

model Airport {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String    @unique
  slug      String?   @unique
  images    String[]  @default([])
  content   String    @default("")
  Company   Company[]

  entities Entity[]
}

enum PaymentMethod {
  IDEAL
  CREDIT_CARD
  PAYPAL
}

enum STATUS {
  PENDING
  SUCCEEDED
  EXPIRED
  CANCELED
}

enum BookingStatus {
  ACTIVE
  REFUND_REQUEST
  REFUNDED
  CANCELED
}

model Booking {
  id                    String        @id @default(uuid())
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  address               String?
  arrivalDate           DateTime
  bookingCode           String        @unique
  carColor              String?
  carLicense            String
  carModel              String
  companyName           String?
  departureDate         DateTime
  email                 String
  firstName             String
  lastName              String
  flightNumber          String?
  isCompany             Boolean       @default(false)
  parkingPrice          Float
  paymentStatus         STATUS?       @default(PENDING) 
  bookingStatus         BookingStatus @default(ACTIVE)
  place                 String?
  phoneNumber           String
  total                 Float
  vatNumber             String?
  numberOfPeople        Int
  zipcode               String?
  arrivalTime           String
  departureTime         String
  daysofparking         Int
  bookingOnBusinessName String?
  extraServiceFee       Float?
  status                String?
  paymentMethod         PaymentMethod @default(IDEAL)
  serviceId             String 
  service               Service       @relation(fields: [serviceId], references: [id])
  logs                  Log[]
  extraOptions          Json[]
  reivew                Review?
  discount              Json?
  serviceCommession     Float


   @@index([arrivalDate])
  @@index([departureDate])
  @@index([paymentStatus])
  @@index([bookingStatus])
  @@index([serviceId])
   @@index([arrivalDate, departureDate])
}

enum Attempt {
  CREATED
  UPDATING
  UPDATED
  REVERTED
  CANCELED
}

model Log {
  id                    String        @id @default(uuid())
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  address               String?
  message               String        @default("new log")
  attempt               Attempt       @default(CREATED)
  arrivalDate           DateTime
  bookingCode           String
  carColor              String?
  carLicense            String
  carModel              String
  companyName           String?
  departureDate         DateTime
  email                 String
  firstName             String
  lastName              String
  discount              Float?
  flightNumber          String?
  isCompany             Boolean       @default(false)
  parkingPrice          Float
  paymentStatus         STATUS?       @default(PENDING)
  bookingStatus         BookingStatus @default(ACTIVE)
  place                 String?
  phoneNumber           String
  payed                 Float
  vatNumber             String?
  numberOfPeople        Int
  zipcode               String?
  arrivalTime           String
  departureTime         String
  daysofparking         Int
  bookingOnBusinessName String?
  extraServiceFee       Float?
  status                String?
  paymentMethod         PaymentMethod @default(IDEAL)
  bookingId             String
  booking               Booking       @relation(fields: [bookingId], references: [id])
}

model Company {
  id        String   @id @default(uuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  address   String
  commision Float    @default(0)
  name      String   @unique
  slug      String?  @unique
  contact   String
  password  String

  vatNO             String?
  chamberOfCommerce String?

  isActive Boolean @default(false)
  phone    String
  place    String
  zipcode  String

  entities Entity[]

  notifications Notification[]
  airports      Airport[]
}

model Entity {
  id            String  @id @default(uuid())
  email         String  @unique
  password      String
  entityName    String  @unique
  slug          String? @unique
  entityAddress String
  entityZipcode String
  entityPlace   String
  phone         String

  contactPerson  String?
  invoiceEmail   String?
  companyName    String
  invoiceAddress String
  invoiceZipcode String
  invoicePlace   String
  invoiceCountry String

  images  String[] @default([])
  logo    String   @default("")
  content String   @default("")

  vatNO String?
  IBAN  String?

  chamberOfCommerce String
  isActive          Boolean @default(false)

  services Service[]
  reviews  Review[]

  airportId String
  airport   Airport @relation(fields: [airportId], references: [id])

  companyId String
  company   Company @relation(fields: [companyId], references: [id])

  notifications Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invoice {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum NotificationType {
  COMPANY
  ENTITY
  SERVICE
  BOOKING
  OPTION
}

enum NotificationsStatus {
  REQUEST
  DELETE
  APPROVE
}

model Notification {
  id String @id @default(uuid())

  companyId String?
  company   Company? @relation(fields: [companyId], references: [id])

  entityId String?
  entity   Entity? @relation(fields: [entityId], references: [id])

  isAdmin Boolean @default(false)

  name     String?
  message  String?
  IdHolder String?
  type     NotificationType?
  status   NotificationsStatus?

  isRead Boolean @default(false)

  servicePrice Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Key {
  KEEP
  LEAVE
}

enum ParkingLocation {
  INDOOR
  OUTDOOR
}

model Service {
  id String @id @default(uuid())

  name           String  @unique
  slug           String? @unique
  parkingAddress String
  parkingCountry String
  parkingPlace   String
  parkingZipcode String

  terms         String
  bookingsEmail String?

  arrivalTodos   String?
  departureTodos String?

  generalInformation String?
  importantInfo      String?

  distanceToAirport Int?
  timeToAirport     Int?

  facilities String[] @default([])
  highlights Json[]   @default([])

  images String[] @default([])

  parkingType ParkingType @default(shuttle)

  electricCharging Boolean         @default(false)
  keyStatus        Key             @default(KEEP)
  parkingLocation  ParkingLocation @default(INDOOR)

  pricings Float[]

  isActive  Boolean @default(false)
  spots     Int     @default(1)
  available Boolean @default(false)

  entityId String

  commession Float @default(0)

  availability Availability[]
  bookings     Booking[]
  rules        Rule[]
  reviews      Review[]
  extraOptions ExraOption[]
  lists        List[] 

  entity Entity @relation(fields: [entityId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model List {
  
  id String @id @default(uuid())

  label String?

  startDate DateTime 
  endDate DateTime

  pricings Float[]

  serviceId String
  service Service @relation(fields: [serviceId],references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Availability {
  id        String   @id @default(uuid())
  startDate DateTime @default(now())
  endDate   DateTime
  label     String?
  serviceId String
  service   Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ParkingType {
  shuttle
  valet
}

enum RuleType {
  FIXED
  PERCENTAGE
}

model Rule {
  id        String   @id @default(uuid())
  label     String
  startDate DateTime
  endDate   DateTime

  type RuleType? @default(FIXED)

  percentage Int?
  value      Int?

  serviceId String
  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ReviewStatus {
  PENDING
  ACTIVE
}

enum ReviewVisibility {
  FIRSTNAME
  FULLNAME
  ANOUNYMOS
}

model Review {
  id        String  @id @default(uuid())
  bookingId String  @unique
  booking   Booking @relation(fields: [bookingId], references: [id])
  entityId  String
  entity    Entity  @relation(fields: [entityId], references: [id])
  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])

  reviewContent String?
  rate          Float

  status     ReviewStatus     @default(PENDING)
  visibility ReviewVisibility

  createdAt DateTime @default(now())
  updatedUt DateTime @updatedAt
}

model Category {
  id    String @id @default(uuid())
  label String @unique

  blogs     Blog[]
  createdAt DateTime @default(now())
  updatedUt DateTime @updatedAt
}

model Blog {
  id String @id @default(uuid())

  title            String
  content          String
  slug             String   @unique
  tags             String[]
  featuredImage    String
  categoryId       String
  author           String
  shortDescription String

  category Category @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updatedUt DateTime @updatedAt
}

model About {
  id String @unique @default("about")

  content String

  createdAt DateTime @default(now())
  updatedUt DateTime @updatedAt
}

model FAQ {
  id String @id @default(uuid())

  question String
  answer   String

  categoryFaqId String
  categoryFaq   CategoryFAQ? @relation(fields: [categoryFaqId], references: [id])

  createdAt DateTime @default(now())
  updatedUt DateTime @updatedAt
}

model Term {
  id String @unique @default("term")

  content String

  createdAt DateTime @default(now())
  updatedUt DateTime @updatedAt
}

model Privacy {
  id String @unique @default("privacy")

  content String

  createdAt DateTime @default(now())
  updatedUt DateTime @updatedAt
}

model ExraOption {
  id          String  @id @default(uuid())
  label       String
  description String
  image       String?
  price       Float
  isActive    Boolean @default(false)
  available   Boolean @default(false)

  commession Int @default(0)

  serviceId String
  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedUt DateTime @updatedAt
}

model CategoryFAQ {
  id    String @id @default(uuid())
  label String

  faqs FAQ[]

  createdAt DateTime @default(now())
  updatedUt DateTime @updatedAt
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

enum Based {
  BOOKING
  CREATING
}

model Discount {
  id    String @id @default(uuid())
  label String

  code  String @unique

  type  DiscountType @default(PERCENTAGE)
  based Based        @default(CREATING)

  percentage Int?
  value      Int?

  startDate DateTime
  endDate   DateTime

  createdAt DateTime @default(now())
  updatedUt DateTime @updatedAt
}
